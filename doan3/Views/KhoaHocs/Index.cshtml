@model doan3.ViewModel.KhoaHocViewModel
@using Microsoft.EntityFrameworkCore
@inject doan3.Models.DacsGplxContext DbContext
@{
    Layout = null;

    // Get the logged-in user's RoleId
    int? roleId = null;
    if (User.Identity?.IsAuthenticated ?? false)
    {
        var userIdClaim = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (int.TryParse(userIdClaim, out int userId))
        {
            var user = await DbContext.Users
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.UserId == userId);
            roleId = user?.RoleId;
        }
    }
}
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center mb-5 fw-bold display-5">Danh Sách Khóa Học</h1>

<div class="container">
    @if(roleId == 1)
    {
        <p class="text-center mb-4">
            <a asp-action="Create" class="btn btn-primary btn-lg"><i class="fas fa-plus me-2"></i> Tạo Khóa Học Mới</a>
        </p>
    }
    <!-- Filter Controls -->
    <div class="d-flex justify-content-end mb-4 align-items-center gap-3">
        <div class="dropdown-wrapper">
            <select id="categoryFilter" class="form-select custom-button" aria-label="Filter by category">
                <option value="">Tất cả hạng</option>
                @{
                    var distinctCategories = Model?.KhoaHocs?.Select(kh => new { Id = kh.Hang.HangId, Name = kh.Hang.Tenhang }).Distinct().ToList();
                    foreach (var category in distinctCategories ?? Enumerable.Empty<dynamic>())
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </select>
        </div>
        <label class="custom-button d-flex align-items-center justify-content-start">
            <input type="checkbox" id="toggleCompletedCourses" class="form-check-input me-2" checked>
            <span id="toggleText">Ẩn các khóa học đã kết thúc</span>
        </label>
    </div>

    <div class="row g-4" id="coursesContainer">
        @if (Model != null && Model.KhoaHocs != null && Model.KhoaHocs.Any())
        {
            @foreach (var item in Model.KhoaHocs)
            {
                // Calculate registration eligibility
                var currentDate = DateOnly.FromDateTime(DateTime.Today);
                var registrationDeadline = currentDate.AddDays(15); // 15 days from today
                var canRegister = Model.HocVien != null && // Có học viên
                Model.HoSo != null && // Có hồ sơ
                item.Hang.HangId == Model.HoSo.HangId && // Hạng của khóa học khớp với hạng của hồ sơ
                item.SoLuongConLai > 0 && // Còn chỗ
                item.Ngaybatdau > registrationDeadline; // Chưa hết hạn đăng ký

                <div class="col-md-6 col-lg-4 course-item" data-end-date="@item.Ngayketthuc.ToString("yyyy-MM-dd")" data-category="@item.Hang.HangId">
                    <div class="card h-100 shadow border-0">
                        <div class="card-body">
                            <h5 class="card-title fw-bold">@Html.DisplayFor(modelItem => item.Tenkhoahoc)</h5>
                            <p class="card-text">@Html.DisplayFor(modelItem => item.Mota)</p>
                            <p class="card-text text-muted small">
                                <strong>Ngày bắt đầu:</strong>
                                @item.Ngaybatdau.ToString("dd/MM/yyyy")
                            </p>
                            <p class="card-text text-muted small">
                                <strong>Ngày kết thúc:</strong>
                                @item.Ngayketthuc.ToString("dd/MM/yyyy")
                            </p>
                            <p class="card-text text-muted small">
                                <strong>Số lượng tối đa:</strong>
                                @Html.DisplayFor(modelItem => item.SlToida) học viên
                            </p>
                            <p class="card-text text-muted small">
                                <strong>Số lượng còn lại:</strong>
                                @item.SoLuongConLai học viên
                            </p>
                            <p class="card-text text-primary small">
                                <strong>Trạng thái:</strong>
                                @Html.DisplayFor(modelItem => item.Trangthai)
                            </p>
                            <p class="card-text text-muted small">
                                <strong>Hạng:</strong>
                                @Html.DisplayFor(modelItem => item.Hang.Tenhang)
                            </p>
                            <!-- Debug: Show registration eligibility -->
                            <p class="card-text text-muted small">
                                <strong>Có thể đăng ký? - </strong>
                                @(canRegister ? "Có" : "Không")
                            </p>
                        </div>
                        <div class="card-footer bg-transparent border-0 p-3">
                            <div class="d-flex flex-column gap-2">
                                <div class="d-flex gap-2">
                                    <a asp-action="Details" asp-route-id="@item.KhoahocId" class="btn btn-outline-primary w-50"><i class="fas fa-info-circle me-2"></i> Xem Chi Tiết</a>
                                    @if (canRegister)
                                    {
                                        <a asp-action="Register" asp-route-id="@item.KhoahocId" class="btn btn-primary w-50"><i class="fas fa-user-plus me-2"></i> Đăng Ký</a>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-secondary w-50" data-bs-toggle="modal" data-bs-target="#reasonModal-@item.KhoahocId">
                                            <i class="fas fa-user-plus me-2"></i> Đăng Ký
                                        </button>
                                    }
                                </div>
                                @if(roleId == 1)
                                {
                                    <div class="d-flex gap-2">
                                        <a asp-action="Edit" asp-route-id="@item.KhoahocId" class="btn btn-warning w-100"><i class="fas fa-edit me-2"></i> Chỉnh Sửa</a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal for Registration Ineligibility Reason -->
                <div class="modal fade" id="reasonModal-@item.KhoahocId" tabindex="-1" aria-labelledby="reasonModalLabel-@item.KhoahocId" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="reasonModalLabel-@item.KhoahocId">Không Thể Đăng Ký</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                @if (Model.HocVien == null)
                                {
                                    <p>Bạn cần <a href="@Url.Action("Login", "Account", new { returnUrl = Url.Action("Register", "KhoaHoc", new { id = item.KhoahocId }) })">đăng nhập</a> để đăng ký khóa học.</p>
                                }
                                else if (Model.HoSo == null)
                                {
                                    <p>Bạn cần tạo hồ sơ trước khi đăng ký khóa học.</p>
                                }
                                else if (item.Hang.HangId != Model.HoSo.HangId)
                                {
                                    <p>Khóa học này không phù hợp với hạng trong hồ sơ của bạn.</p>
                                }
                                else if (item.SoLuongConLai <= 0)
                                {
                                    <p>Khóa học đã đủ số lượng học viên.</p>
                                }
                                else if (item.Ngaybatdau <= registrationDeadline)
                                {
                                    <p>Khóa học sắp bắt đầu (trước ngày @registrationDeadline.ToString("dd/MM/yyyy")), không thể đăng ký.</p>
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p class="text-muted">Hiện tại chưa có khóa học nào.</p>
            </div>
        }
    </div>
</div>

<style>
    .card {
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2) !important;
        }

    .card-body {
        min-height: 250px;
    }

    .card-footer {
        text-align: center;
    }

    .btn {
        font-weight: 500;
    }

    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #000;
    }

        .btn-warning:hover {
            background-color: #e0a800;
            color: #000;
        }

    .course-item.hidden {
        display: none;
    }

    .custom-button {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        border: 1px solid #ced4da;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        height: 38px;
        display: flex;
        align-items: center;
        background-color: #fff;
        color: #333;
        transition: background-color 0.3s ease, border-color 0.3s ease;
    }

        .custom-button:hover {
            background-color: #f8f9fa;
            border-color: #adb5bd;
        }

        .custom-button:focus-within {
            outline: none;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .dropdown-wrapper {
        display: inline-block;
    }

    #categoryFilter.custom-button {
        width: 250px;
    }

    #toggleCompletedCourses.custom-button {
        width: 180px;
    }

    .custom-button .form-check-input {
        margin-right: 0.5rem;
        cursor: pointer;
    }

        .custom-button .form-check-input:focus {
            box-shadow: none;
        }

    @@media (max-width: 768px) {
        .d-flex.justify-content-end {
            flex-direction: column;
            align-items: flex-end;
            gap: 1rem;
        }

        .custom-button {
            width: 100%;
            max-width: 100%;
            height: auto;
            padding: 0.5rem 1rem;
        }

        #categoryFilter.custom-button,
        #toggleCompletedCourses.custom-button {
            width: 100%;
        }
    }
</style>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#toggleCompletedCourses').change(function () {
                var isChecked = $(this).is(':checked');
                var $label = $('#toggleText');
                if (isChecked) {
                    $label.text('Ẩn các khóa học đã kết thúc');
                } else {
                    $label.text('Hiện các khóa học đã kết thúc');
                }
                filterCourses();
            });

            $('#categoryFilter').on('change', function () {
                filterCourses();
            });

            function filterCourses() {
                var today = new Date().toISOString().split('T')[0];
                var selectedCategory = $('#categoryFilter').val();
                var isHideCompleted = $('#toggleCompletedCourses').is(':checked');

                $('.course-item').each(function () {
                    var endDate = $(this).data('end-date');
                    var category = $(this).data('category').toString();
                    var shouldHide = false;

                    if (isHideCompleted && endDate && endDate < today) {
                        shouldHide = true;
                    }
                    if (selectedCategory && selectedCategory !== "" && category !== selectedCategory) {
                        shouldHide = true;
                    }

                    if (shouldHide) {
                        $(this).addClass('hidden');
                    } else {
                        $(this).removeClass('hidden');
                    }
                });
            }

            filterCourses();
        });
    </script>
}